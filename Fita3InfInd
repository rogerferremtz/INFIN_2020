#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <pthread.h>
#include <unistd.h>
#include <fcntl.h>                                                        
#include <termios.h>       
#include <sys/ioctl.h>
#include <time.h>



#define SIZE_OF_BUFFER 100		//Tamany buffer circular.
#define BAUDRATE B9600                  //Velocitat comunicació sèrie.                           
//#define MODEMDEVICE "/dev/ttyS0"   	//Conexió IGEP - Arduino.
#define MODEMDEVICE "/dev/ttyACM0"      //Conexió directa PC(Linux) - Arduino.
#define _POSIX_SOURCE 1 		// POSIX compliant source.



int tmostr;				//Temps de mostratge entrat per la consola.
bool modemarxa = true;			//Variable booleana que ens indica si l'Arduino està llegint dades.
int fd, i = 0, res, res1, res2;         //Variables usades per saber el nombre de bytes que ens comunica l'Arduino.                                                
char buf[255];				//Array de chars on s'emmagatzema el valor rebut de l'Arduino.
char missatge[255];			//Array de chars que inclou el missatge que s'envia a l'Arduino.
union{
	long int i;
	char	c[4];
}conversio;
int bytes;
float arraycircular[SIZE_OF_BUFFER] = { 0 };	//Definim el tamany del buffer.
int indexLlegir = 0;				//Índex al punter de lectura.
int indexEscriure = 0;				//Índex al punter d'escriptura.
int numeroceldas = 0;				//Nombre de valors en el buffer circular.

	
float max=0;		//Variable que emmagatzema el valor màxim de temperatura mesurat.
float min=70;		//Variable que emmagatzema el valor mínim de temperatura mesurat.
int mitjana=0;		//Variable que emmagatzema el nombre de temperatures del quals es vol fer la mitjana.




struct termios oldtio,newtio;   		//Estructura del codi per comunicar amb l'arduino.



/*******************************Prototipus de les funcions***********************************************************/

void Param_Marxa();			//Funció que envia l'ordre de marxa.
void buffer(float); 			//Funció que emmagatzema les temperatures registrades.
int ConfigurarSerie(void);		//Funció que configura el port sèrie.
void TancarSerie(int);			//Funció que tanca el port sèrie.
void demanarmostra(int);		//Funció que demana la mostra llegida per l'Arduino.
void registremax_min(float);		//Funció que emmagatzema els valors màxims i mínims.
int tiempo();				//Funció que compta segons.
void blinkingled();			//Funció que fa que el LED 13 s'encengui i s'apagui cada cop que es realitza una lectura.

/********************************************************************************************************************/

int main (){
	Param_Marxa();	
}

int	ConfigurarSerie(void){
    fd = open(MODEMDEVICE, O_RDWR | O_NOCTTY );                             
	if (fd <0) {perror(MODEMDEVICE); exit(-1); }
	tcgetattr(fd,&oldtio); /* save current port settings */
	bzero(&newtio, sizeof(newtio));                                         
	//newtio.c_cflag = BAUDRATE | CRTSCTS | CS8 | CLOCAL | CREAD;             
	newtio.c_cflag = BAUDRATE | CS8 | CLOCAL | CREAD;             
	newtio.c_iflag = IGNPAR;                                                
	newtio.c_oflag = 0;
	/* set input mode (non-canonical, no echo,...) */                       
	newtio.c_lflag = 0;
	newtio.c_cc[VTIME]    = 0;   /* inter-character timer unused */         
	newtio.c_cc[VMIN]     = 1;   /* blocking read until 1 chars received */
	tcflush(fd, TCIFLUSH);                                                  
	tcsetattr(fd,TCSANOW,&newtio);	
	sleep(2); //Per donar temps a que l'Arduino es recuperi del RESET	
	return fd;
}               

void TancarSerie(fd){
	tcsetattr(fd,TCSANOW,&oldtio);
	close(fd);
}

void Param_Marxa(){
	
	printf("\nEntra el temps de mostreig (1-20s): ");				//Es demana el temps de mostreig desitjat.
	scanf("%d",&tmostr);								//L'usuari entra el temps de mostreig.
	
	while (tmostr>20 || tmostr<1){							//Comprovar si el valor entrat no està inclòs a l'intèrval estipulat per l'enunciat.
	 	printf("*Valor erroni!*\nSiusplau, torni-ho a intentar: ");		//Notificar a l'usuari que el valor entrat és erroni i se li demana que el torni a entrar.
		scanf("%d",&tmostr);											
	 }
	
	printf("\nEntra el nombre de valors dels quals es vol fer la mitjana: ");	//Es demana el nombre de valors dels quals es vol fer la mitjana.
	scanf("%d",&mitjana);								//L'usuari entra el nombre de valors.
	
	while (mitjana>100 || mitjana<2){						//Comprovar si el valor entrat no està inclòs a l'intèrval estipulat per l'enunciat.
	 	printf("*Valor erroni!*\nSiusplau, torni-ho a intentar: ");		//Notificar a l'usuari que el valor entrat és erroni i se li demana que el torni a entrar.
		scanf("%d",&mitjana);											
	 }
	 
/************************* CODI COMUNICACIÓ RASPBERRY PI AMB ARDUINO*************************************/	
	fd = ConfigurarSerie();

	sprintf(missatge,"AM1%.2dZ\n",tmostr/2);					//Ordre de marxa, amb temps de mostratge la meitat del entrat per consola.

	res = write(fd,missatge,strlen(missatge));

	if (res <0) {tcsetattr(fd,TCSANOW,&oldtio); perror(MODEMDEVICE); exit(-1); }

	printf("Enviats %d bytes: ",res);
	
	for (i = 0; i < res; i++){
		printf("%c",missatge[i]);
	}
	
	printf("\n");
	
	modemarxa = true;				//Establim que estem en mode 'MARXA'.
	
	while(modemarxa==true){				//Sempre que estiguem en mode marxa, cridem la funció "tiempo()", que compta segons.
		int segons = tiempo();			
		if(segons == tmostr){
			demanarmostra(tmostr);		//Un cop la funció "tiempo()" hagi comptat els segons que han estat entrats per l'usuari, cridem la funció que envia l'ordre "ACZ".
		}
	}
/********************************************************************************************************/	
	
}

void buffer(float variableperguardar){
	

	float suma=0;			//Variable que emmagatzema la suma de les "X" temperatures de les quals volem fer la mitjana.

/*******************************************CONFIGURACIÓ BUFFER CIRCULAR ********************************/
	
	arraycircular[indexEscriure]=variableperguardar;
	indexEscriure++;
	if(numeroceldas != SIZE_OF_BUFFER){
		numeroceldas++;
	}
	
	printf("Actualment hi ha %d mostres guardades de 100, mostra guardada és %0.2fºC\n",numeroceldas, arraycircular[indexEscriure-1]);	//Es notifica a l'usuari el nombre de mostres emmagatzemades i quina ha estat la última.
	blinkingled();
	
	if(indexEscriure == SIZE_OF_BUFFER){
		indexEscriure = 0;
	}
/********************************************************************************************************/

		for(int i = indexEscriure -1; i >=(indexEscriure-mitjana); i--){
			suma=suma + arraycircular[i];						//Fem la suma de les "X" últimes mostres.
		}
		float mitja = suma/mitjana;							//Dividim la variable "suma" entre el nombre de temperatures sumades, fent així la mitjana.
		printf("La mitjana de les últimes %d mostres és %0.2fºC\n", mitjana, mitja);	//Treiem la informació per pantalla.



}



void demanarmostra(int temps){
/************************* CODI COMUNICACIÓ RASPBERRY PI AMB ARDUINO*************************************/	
	fd = ConfigurarSerie();

	sprintf(missatge,"ACZ\n");				//Enviem l'ordre de l'Operació 'C'.

	res1 = write(fd,missatge,strlen(missatge));

	if (res1 <0) {tcsetattr(fd,TCSANOW,&oldtio); perror(MODEMDEVICE); exit(-1); }

		
	sleep(1);
	res1 = read(fd,buf,1); 			//Cal rebre d'un byte en un byte perquè newtio.c_cc[VMIN] = 1 A ConfigurarSerie(void)
	res1 = res1 + read(fd,buf+1,1);		//Rebem de l'Arduino 7 bytes.
	res1 = res1 + read(fd,buf+2,1);
	res1 = res1 + read(fd,buf+3,1);
	res1 = res1 + read(fd,buf+4,1);
	res1 = res1 + read(fd,buf+5,1);
	res1 = res1 + read(fd,buf+6,1);

		
		
	int milers = buf[3]-'0';		//Convertim les dades comunicades de char a integer.
	int centenes = buf[4]-'0';
	int desenes = buf[5]-'0';
	int unitats = buf[6]-'0';
	
	int temperatura = milers*1000+centenes*100+desenes*10+unitats;					//Formem una mateixa dada, que va de 0 a 1023.
	
	if(temperatura<1024){
		float temperaturaengraus = (temperatura*70)/1023;					//Convertim la dada rebuda de l'Arduino a graus centígrads.
		printf("Hem rebut %d, que correspòn a  %0.2f ºC\n",temperatura, temperaturaengraus);
		buffer(temperaturaengraus);								//La temperatura, ja convertida a graus centígrads s'envia a la funció "buffer()" per emmagatzemar-la.
		registremax_min(temperaturaengraus);							//La temperatura, ja convertida a graus centígrads s'envia a la funció "registremax_min", per actualitzar, si cal, els regístres de temperatura màxima i mínima.
		TancarSerie(fd);
	}else{
		printf("Hi ha hagut un error en la comunicació sèrie, ho tornem a intentar, disculpi les molèsties\n");
		demanarmostra(temps);
	}
}

void registremax_min(float temperatura){

	
	if (temperatura>max){							//En cas de ser la nova temperatura superior a la que fins ara havia estat considerada com a màxima, esdevé la nova temperatura màxima.
		max=temperatura;
		printf("El nou màxim és %0.2fºC\n", max);		
	}
	if (temperatura<min){							//En cas de ser la nova temperatura inferior a la que fins ara havia estat considerada com a mínima, esdevé la nova temperatura mínima.
		min=temperatura;
		printf("El nou mínim és %0.2fºC\n", min);
	}
}

int tiempo(){						//Aquesta funció compta segons, està configurada per treure per pantalla el nombre de segons que va comptant, quan arriba al temps estipulat per "tmostr",
							//finalitza la seva execució, permetent així l'execució de la funció "demanarmostra()".
	clock_t t,ts;
	int segundos=0;
	ts=clock()+CLOCKS_PER_SEC;
	for(;;){
		if((t=clock())>=ts){
		  printf("%d\n",++segundos);
		  ts=t+CLOCKS_PER_SEC;
		  if(segundos == tmostr){
			break;
		  }
		}
	}
	return segundos;
}

void blinkingled(){
	/******************************* FEM QUE EL LED FACI UNA PULSACIÓ ****************************************/
	fd = ConfigurarSerie();

	sprintf(missatge,"AS131Z\n");								//Enviem l'ordre de l'Operació 'S' per encendre el LED 13.

	res1 = write(fd,missatge,strlen(missatge));

	if (res1 <0) {tcsetattr(fd,TCSANOW,&oldtio); perror(MODEMDEVICE); exit(-1); }


	
	sprintf(missatge,"AS130Z\n");								//Enviem l'ordre de l'Operació 'S' per a que el LED 13 s'apagui.
	res1 = write(fd,missatge,strlen(missatge));
	if (res1 <0) {tcsetattr(fd,TCSANOW,&oldtio); perror(MODEMDEVICE); exit(-1); }
	
	TancarSerie(fd);
/********************************************************************************************************/
}

